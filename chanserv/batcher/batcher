#!/usr/bin/env python
import psycopg2, psycopg2.extras, time, smtplib, traceback
from config import CONFIG
from templates import MAILTEMPLATES

conn = psycopg2.connect(CONFIG["conn"])
assert(CONFIG["from"])
assert(CONFIG["smtphost"])

for key, value in MAILTEMPLATES["languages"].items():
  MAILTEMPLATES["languages"][key] = dict([(k, { "body": v["body"].strip().replace("\n", "\r\n"), "subject": v["subject"]}) for k, v in value.items()])

MAILTEMPLATES["languages"][""] = MAILTEMPLATES["languages"][CONFIG["defaultlang"]]

def inject(to, subject, body):
  d = time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.gmtime())
  msg = "Date: %s\r\nFrom: %s\r\nTo: %s\r\nSubject: %s\r\nX-Mailer: Q9Batcher\r\n\r\n%s" % (d, CONFIG["from"], to, subject, body)
# this should probably go outside the loop...
# making a connection for each email SUCKS
# todo: lookup semantics of exceptions and stuff
  server = smtplib.SMTP(CONFIG["smtphost"], local_hostname="localhost")
  if CONFIG.setdefault("smtpauth"):
    server.login(*CONFIG["smtpauth"])
  server.sendmail(CONFIG["from"], to, msg)
  server.quit()

def processtemplate(emailtype, lang, obj):
  if MAILTEMPLATES["mutators"].has_key(emailtype):
    MAILTEMPLATES["mutators"][emailtype](CONFIG, obj)

  if MAILTEMPLATES["languages"].has_key(lang) and MAILTEMPLATES["languages"][lang].has_key(emailtype):
    k = MAILTEMPLATES["languages"][lang][emailtype]
  else:
    k = template, subject = MAILTEMPLATES["languages"][""][emailtype]

  return k["body"] % obj, k["subject"] % obj, MAILTEMPLATES["sendto"].setdefault(emailtype)

def email(userid, emailtype, prevemail):
  cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
  cur.execute("SELECT users.*, code FROM chanserv.users LEFT JOIN chanserv.languages ON language = languageid WHERE id = %d" % userid)

  unifieddict = {}
  one = cur.fetchone()
  if one is None:
    return

  for key, value in one.items():
    unifieddict["user.%s" % key] = value

  for key, value in CONFIG["templateoptions"].items():
    unifieddict["config.%s" % key] = value

  if prevemail:
    unifieddict["prevemail"] = prevemail

  if unifieddict["user.language"] != 0:
    language = unifieddict["user.code"]
  else:
    language = ""

  template, subject, mailto = processtemplate(emailtype, language, unifieddict)
  if not mailto:
    mailto = "user.email"

  if not unifieddict[mailto]:
    return

  print "%s -> %s (%d)" % (`subject`, `unifieddict[mailto]`, userid)
  inject(unifieddict[mailto], subject, template)

def main():
  ignoring = {}
  while True:
    cur = conn.cursor()
    cur.execute("SELECT mailid, userid, emailtype, prevemail FROM chanserv.email")

    deleting = []
    while True:
      t = time.time()
      rows = cur.fetchone() 
      if not rows:
        break

      try:
        if ignoring.has_key(rows[0]):
          d = ignoring[rows[0]]
          if d[1] > t:
            continue
        else:
          d = None

        email(rows[1], rows[2], rows[3])
        deleting.append(rows[0])
        if d:
          del ignoring[rows[0]]
      except:
        ex = ignoring.has_key(rows[0]) and ignoring[rows[0]][0] or 30
        ignoring[rows[0]] = (ex * 2, time.time() + ex * 2)
        print "Error processing id %d." % rows[0]
        traceback.print_exc()

    if len(deleting) > 0:
      cur.execute("BEGIN TRANSACTION")
      for x in deleting:
        cur.execute("DELETE FROM chanserv.email WHERE mailid = %d" % x)
      cur.execute("COMMIT")

    time.sleep(5)

if __name__ == "__main__":
  main()
